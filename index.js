(()=>{"use strict";(()=>{class t{constructor(t,e){this.name=t,this.length=e,this.hits=0}hit(){this.hits+=1}isSunk(){return this.length<=this.hits}}class e{constructor(){this.board=this.createBoard(),this.ships=[],this.hits=new Set,this.attacks=new Set}createBoard(){return Array.from({length:10},(()=>Array(10).fill(null)))}placeShip(e,a,r){const s=new t(a,r);this.ships.push(s),e.forEach((t=>{const[e,a]=t;this.board[e][a]=s}))}receiveAttack(e){const[a,r]=e;this.board[a][r]instanceof t?(this.board[a][r].hit(),this.hits.add(e.toString())):this.attacks.add(e.toString())}allSunk(){return this.ships.every((t=>t.isSunk()))}randomShipPlacement(){this.board=this.createBoard(),this.ships=[],[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Cruiser",length:3},{name:"Submarine",length:3},{name:"Destroyer",length:2}].forEach((t=>{let e=!1;for(;!e;){const a=Math.random()>.5,r=Math.floor(Math.random()*(a?10-t.length:10)),s=Math.floor(Math.random()*(a?10:10-t.length)),i=[];for(let e=0;e<t.length;e++)a?i.push([r+e,s]):i.push([r,s+e]);this.positionIsAvailable(i)&&(this.placeShip(i,t.name,t.length),e=!0)}}))}positionIsAvailable(e){return e.every((e=>{const[a,r]=e;return!(this.board[a][r]instanceof t)}))}}class a{constructor(){this.gameboard=new e}}class r extends a{constructor(){super(),this.attacks=new Set,this.playerBoard=null,this.attackDirection=null,this.currentShipAttacks=[]}makeMove(){let e;if(this.currentShipAttacks[0]){if(e=this.determineMove(),this.playerBoard.receiveAttack(e),this.playerBoard.board[e[0]][e[1]]instanceof t&&this.playerBoard.board[e[0]][e[1]]!==this.currentShipAttacks[0][1]){const t=new Map;t.set(e.toString(),"hit");const a=this.playerBoard.board[e[0]][e[1]];this.currentShipAttacks.push([t,a])}else this.playerBoard.board[e[0]][e[1]]instanceof t?(this.currentShipAttacks[0][0].set(e.toString(),"hit"),this.playerBoard.board[e[0]][e[1]].isSunk()&&this.currentShipAttacks.shift()):this.currentShipAttacks[0][0].keys().toArray().length>1&&this.currentShipAttacks[0][0].set(e.toString(),"miss");return e}if(e=this.getRandomMove(),this.playerBoard.board[e[0]][e[1]]instanceof t){const t=new Map;t.set(e.toString(),"hit");const a=this.playerBoard.board[e[0]][e[1]];this.currentShipAttacks.push([t,a])}return this.playerBoard.receiveAttack(e),e}determineMove(){let t;const e=this.currentShipAttacks[0][0].keys().toArray(),a=this.currentShipAttacks[0][0].values().toArray(),r=e[0],s=e[e.length-1];return 1===e.length?(t=this.getAdjacentMove([Number(r.at(0)),Number(r.at(2))]),t):a.some((t=>"miss"===t))?(e.forEach((t=>{if(t===e[e.length-1]){const t=Array.from(this.currentShipAttacks[0][0].keys()).pop();this.currentShipAttacks[0][0].delete(t)}})),t=this.getNextMove([Number(r.at(0)),Number(r.at(2))],this.attackDirection,"-"),this.attacks.add(t.toString()),t):(t=this.getNextMove([Number(s.at(0)),Number(s.at(2))],this.attackDirection),this.attacks.has(t.toString())&&(t=null===this.playerBoard.board[t[0]][t[1]]||this.playerBoard.board[t[0]][t[1]]!==this.currentShipAttacks[0][1]?this.getNextMove([Number(r.at(0)),Number(r.at(2))],this.attackDirection,"-"):this.getNextMove([Number(s.at(0)),Number(s.at(2))],this.attackDirection,"-")),this.attacks.add(t.toString()),t)}getRandomMove(){let t;do{t=[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}while(this.attacks.has(t.toString()));return this.attacks.add(t.toString()),t}getAdjacentMove(t){let e,a=[[0,1],[0,-1],[1,0],[-1,0]];for(let r=0;r<=3&&!(e&&!this.attacks.has(e.toString())&&e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9);r++)e=[t[0]+a[r][0],t[1]+a[r][1]];return e[0]===t[0]?this.attackDirection="vertical":this.attackDirection="horizontal",this.attacks.add(e.toString()),e}getNextMove(t,e,a){let r;return"vertical"===e&&(r="-"===a?[t[0],t[1]-1]:[t[0],t[1]+1]),"horizontal"===e&&(r="-"===a?[t[0]-1,t[1]]:[t[0]+1,t[1]]),r}}class s{static createGameboard(t,e){const a=document.createElement("div");a.classList.add("gameboard"),a.classList.add(t);const r=document.createElement("div");r.classList.add("gameboard-text");r.innerText={player:"Your Board",computer:"Opponent's Board",reset:"Drag the ships to the grid, and then click to rotate"}[t];const s=[" abcdefghij",Array.from({length:10})];for(let r=0;r<=e.board.length;r++){const i=document.createElement("div");i.classList.add("row"),a.appendChild(i);for(let a=0;a<=e.board.length;a++){if(r===e.board.length){const t=document.createElement("div");t.classList.add("coor"),t.innerText=s[0][a],i.appendChild(t);continue}if(0===a){const t=document.createElement("div");t.classList.add("coor"),t.innerText=s[1].length-r-1,i.appendChild(t);continue}const o=this.createCell(this.getCellType(e,t,r,a));o.classList.add(t),o.dataset.x=r,o.dataset.y=a-1,i.appendChild(o)}}return a.appendChild(r),a}static getCellType(t,e,a,r){const s=[a,r-1].toString();return t.hits.has(s)&&t.ships.includes(t.board[a][r-1])&&"player"===e?"shiphit":t.hits.has(s)?"hit":t.attacks.has(s)?"miss":t.ships.includes(t.board[a][r-1])&&"player"===e?"ship":void 0}static createCell(t){const e=document.createElement("div");return e.classList.add("cell"),e.classList.add({shiphit:"shiphit",miss:"miss",hit:"hit",ship:"ship"}[t]||"empty"),e}}class i{static createButton(t){const e=document.createElement("button");return e.classList.add(`${t}`,"control-button"),e.innerText={reset:"Reset Positions",start:"Start Game",again:"Play Again",random:"Random Positions"}[t],e}}class o{static createNotification(t,e){const a=document.createElement("div");a.classList.add(`${t.toLowerCase()}`,"notifications");const r={start:"Start Game or Reset Positions",win:"Congratulations! You Win!",lose:"Game Over! You Lose!",playerTurn:"Your Turn!",computerTurn:"Opponent's Turn!",playerSunk:`Your ${e} has been sunk!`,computerSunk:`Opponent's ${e} has been sunk!`,reset:"Place Ships and Start Game!"};return a.innerText=r[t],a}}(new class{constructor(){this.player=new a,this.computer=new r,this.shipSunkLastTurn=null}headerDOM=document.querySelector(".header");gameDOM=document.querySelector(".game");controlsDOM=document.querySelector(".controls");randomPositions(t){let e;if("random"===t)return this.player.gameboard.randomShipPlacement(),this.computer.playerBoard=this.player.gameboard,void this.gameDOM.querySelector(".player").replaceWith(s.createGameboard("player",this.player.gameboard));"player"===t?(this.player.gameboard.randomShipPlacement(),this.computer.playerBoard=this.player.gameboard,e=this.player.gameboard):(this.computer.gameboard.randomShipPlacement(),e=this.computer.gameboard),this.gameDOM.appendChild(s.createGameboard(`${t}`,e))}showComputerShips(){this.gameDOM.querySelector(".computer").querySelectorAll(".cell").forEach((t=>{const e=t.getAttribute("data-x"),a=t.getAttribute("data-y");this.computer.gameboard.ships.includes(this.computer.gameboard.board[e][a])&&t.classList.add("ship")}))}endGame(){this.player.gameboard.allSunk()?this.headerDOM.querySelector(".notifications").replaceWith(o.createNotification("lose")):this.headerDOM.querySelector(".notifications").replaceWith(o.createNotification("win")),this.showComputerShips(),this.controlsDOM.appendChild(i.createButton("again")),this.controlsDOM.querySelector(".again").addEventListener("click",(()=>location.reload()))}async computerTurn(){this.shipSunkLastTurn?this.headerDOM.querySelector(".notifications").replaceWith(o.createNotification("computerSunk",this.shipSunkLastTurn.name)):this.headerDOM.querySelector(".notifications").replaceWith(o.createNotification("computerTurn")),await new Promise((t=>setTimeout(t,500))),this.handleComputerAttack()}handleComputerAttack(){const t=this.computer.makeMove(),[e,a]=t;if(this.gameDOM.querySelector(".player").replaceWith(s.createGameboard("player",this.player.gameboard)),this.shipSunkLastTurn=null,this.player.gameboard.ships.includes(this.player.gameboard.board[e][a])){const t=this.player.gameboard.ships.find((t=>t===this.player.gameboard.board[e][a]));t.isSunk()?this.shipSunkLastTurn=t:this.shipSunkLastTurn=null}this.player.gameboard.allSunk()?this.endGame():this.playerTurn()}playerTurn(){this.shipSunkLastTurn?this.headerDOM.querySelector(".notifications").replaceWith(o.createNotification("playerSunk",this.shipSunkLastTurn.name)):this.headerDOM.querySelector(".notifications").replaceWith(o.createNotification("playerTurn")),this.gameDOM.querySelector(".computer").addEventListener("click",this.handlePlayerAttack)}handlePlayerAttack=t=>{if(t.target.classList.contains("cell")&&t.target.classList.contains("empty")){const e=t.target.getAttribute("data-x"),a=t.target.getAttribute("data-y");if(this.computer.gameboard.receiveAttack([e,a],"player"),this.gameDOM.querySelector(".computer").replaceWith(s.createGameboard("computer",this.computer.gameboard)),this.shipSunkLastTurn=null,this.computer.gameboard.ships.includes(this.computer.gameboard.board[e][a])){const t=this.computer.gameboard.ships.find((t=>t===this.computer.gameboard.board[e][a]));t.isSunk()?this.shipSunkLastTurn=t:this.shipSunkLastTurn=null}if(this.computer.gameboard.allSunk())return void this.endGame();this.computerTurn()}};startGame(){this.controlsDOM.innerHTML="",this.playerTurn()}initGame(){this.headerDOM.appendChild(o.createNotification("start")),this.randomPositions("player"),this.randomPositions("computer"),this.controlsDOM.appendChild(i.createButton("start")),this.controlsDOM.appendChild(i.createButton("random")),this.controlsDOM.querySelector(".random").addEventListener("click",(()=>this.randomPositions("random"))),this.controlsDOM.querySelector(".start").addEventListener("click",(()=>this.startGame()))}}).initGame()})()})();